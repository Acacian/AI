services:
  model-generator:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: model-generator
    volumes:
      - ./models:/models
    command: >
      sh -c "python /app/scripts/export_mining_model.py &&
             python /app/scripts/export_pattern_model.py &&
             python /app/scripts/export_risk_model.py"
    networks:
      - ainet
    restart: "no"

  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: gateway-aiport
    depends_on:
      model-generator:
        condition: service_completed_successfully
      triton:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - ainet
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  triton:
    image: nvcr.io/nvidia/tritonserver:23.03-py3
    container_name: triton-inference
    depends_on:
      model-generator:
        condition: service_completed_successfully
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    volumes:
      - ./models:/models
    command: [ "tritonserver", "--model-repository=/models" ]
    ports:
      - "8010:8000"
      - "8011:8001"
      - "8012:8002"
    networks:
      - ainet
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/v2/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0
    container_name: redis-aiport
    ports:
      - "6380:6379"
    networks:
      - ainet
    restart: on-failure
    command: >
      redis-server --appendonly yes --auto-aof-rewrite-percentage 50 --auto-aof-rewrite-min-size 128mb
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-broker
    networks:
      - ainet
    ports:
      - "29092:29092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: "kafka-cluster-ainet"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,EXTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    restart: always
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - ainet
    ports:
      - "8088:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    restart: always

networks:
  ainet:
    driver: bridge

volumes:
  redis-data:
  kafka-data:

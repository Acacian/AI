version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: gateway-aiport
    depends_on:
      triton:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - ainet
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  triton:
    image: nvcr.io/nvidia/tritonserver:23.03-py3
    container_name: triton-inference
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./models:/models 
    command: ["tritonserver", "--model-repository=/models"]
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    networks:
      - ainet
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0
    container_name: redis-aiport
    ports:
      - "6379:6379"
    networks:
      - ainet
    restart: on-failure
    command: >
      redis-server --appendonly yes --auto-aof-rewrite-percentage 50 --auto-aof-rewrite-min-size 128mb
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: kafka-zookeeper
    networks:
      - ainet
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    restart: always

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-broker
    networks:
      - ainet
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,EXTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"  
    restart: always
    volumes:
      - kafka-data:/var/lib/kafka/data 

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - ainet
    ports:
      - "8088:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=localhost:29092 
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    restart: always

networks:
  ainet:
    driver: bridge

volumes:
  redis-data:
  kafka-data:  
